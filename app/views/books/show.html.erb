<%= link_to "新着一覧に戻ります", "/index"%>
<div class="card-show">
  <div class="card-image">
    <%= image_tag @book.image %>
  </div>
  <div class="card-right">
    <p>作者</p>
    <%# jsで動かすためのidとして区別できるように、「js」 をつけることがある %>
    <h1>
      <%= @book.author%>
    </h1>
    <p>タイトル</p>
    <h1>
      <%= @book.title %>
    </h1>
  </div>
  <%#  1つの本に対して感想は複数存在する %>
  <div class="card-text">
    <% @impressions.each_with_index do |impressions,index| %>
    <p>題名</p>
    <%= impressions.story %>
    <p>かんそう</p>
    <%= impressions.impressions %>

    <div class="card-under">
      <% if my_like = Like.find_by(impression_id: impressions.id, user_id: @current_user.id)%>
      <%  #メモ
          # そもそも、link_toはリンク（aタグ）を生成するためのものなので、あまりパラメータを渡して◯◯するという用途に向かない
          # パラメータを渡してなにか処理をする、といった場合はformを使う
          #（ただし、form_tag / form_forは、rails5系ではform_withを使うことが多い
          %>
      <span date-option=true class="material-icons hart">favorite</span>
      <%= impressions.likes.count %>
      <% else %>
      <% # メモ formのsubmitを何かしらでsubmitしないと行けない %>
      <% # 使っているcssライブラリ上の特性上、form-buttonにデザインを当てることが難しいので、既存のspanを使いまわしつつ、jsでsubmitを発火させる%>
      <span date-option="like_one" class="material-icons" onClick='fireLikeSubmit("<%= "js-like-form-#{index}" %>")'>favorite</span>
      <%= impressions.likes.count %>
      <% end %>
    </div>
  </div>

  <div>
    <% if @current_user.id == impressions.user.id %>
    <%= link_to "編集", "/#{impressions.id}/edit"%>
    <%= link_to "削除", "/#{impressions.id}/destroy", :method => :post %>
    <% end%>
  </div>
</div>
<% end %>
</div>

<% # イコールがないと表示されない。なんか別の書き方　→　render :partial => "post.html.erb", :collection => Post.all, :locals => { :bgcolor => "#ffe6e6" } %>
<%= render partial: 'books/cards/comments', locals: { comment: @comments, new_comment: @new_comment, book_id: @book.id } %>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script>
  $(function () {
        $('.material-icons').on('click', function () {
            if ($(my_like == true) {
                $.ajax({
                  url: '/likes/#{impressions.id}/destroy',
                  type: 'POST',
                  date: {
                    'impression_id'
                    $('impressions.id').val()
                  }
                })
                else {
                  $.ajax({
                    // likes_create_path
                    url: '/likes/#{impressions.id}/create',
                    type: 'POST',
                    date: {
                      'user_id'
                      $('@current_user.id').val(),
                      'impression_id'
                      $('impressions.id').val(),
                      'book_id'
                      $('impressions.id').val()
                    }
                  })
                };

              })
          };
        });
</script>

<%
# 通常javascriptの処理は、.jsファイルに記述する。
# 今は暫定で、HTML（erb）に直書きしている
# javascriptを学習する際に
# - asset pipline
# - jsファイルの読み込み
# - jsファイルの書き方
# などを一緒に学習しましょう
# 
%>
<script>
  // Like処理のsubmitをjavascriptで発火させる
  // idを指定できるようにしているのは、複数のimpression（感想）があって、like-formが複数できる予定だから
  function fireLikeSubmit(id) {
    // document ... 開いているHTMLのページ全部、というくらいの意味
    // forms ... documentにぶら下がっているform一覧。formのidで区別可能
    // forms[id] ... 指定されたid名でformを識別する
    // submit ... submitボタンを押したのと同じ効果
    document.forms[id].submit();
  }
</script>